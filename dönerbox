#include <SoftwareSerial.h>
#include <TinyGPS++.h>
#include <avr/pgmspace.h>
#include "Adafruit_MPR121.h"


SoftwareSerial gpsSerial(4, 3);  // RX, TX
TinyGPSPlus gps;

Adafruit_MPR121 cap = Adafruit_MPR121();




//DÃ–NERBANK

const float doener_lats[] PROGMEM = {
  52.3653091, 52.3927620, 52.4058776, 52.3960543, 52.4013274, 52.4107946, 52.4373092, 52.4233888, 52.4301731, 52.4314015, 52.4427638, 52.4356883, 52.4005841, 52.4184266, 52.4205413, 52.4191868, 52.4431579, 52.4354254, 52.4436128, 52.3607403, 52.3865120, 52.3869891, 52.3865266, 52.4143333, 52.4280524, 52.4299162, 52.4286329, 52.4370680, 52.4354068, 52.4360093, 52.4366315, 52.4360455, 52.3983851, 52.4149931, 52.4265530, 52.4434388, 52.4236334, 52.4502488, 52.4489953, 52.4501745, 52.4750015, 52.4805877, 52.4884468, 52.4908227, 52.5399055, 52.5103092, 52.5103854, 52.5062604, 52.5100946, 52.5192259, 52.5065822, 52.5071715, 52.4999410, 52.4998032, 52.5050521, 52.5067826, 52.5069224, 52.5104057, 52.5064184, 52.5089991, 52.5163021, 52.5165709, 52.5174890, 52.5255491, 52.5255415, 52.4556846, 52.4570794, 52.4561604, 52.4508328, 52.4510883, 52.4585682, 52.4604168, 52.4594259, 52.4633965, 52.4597055, 52.4617313, 52.4688809, 52.4697381, 52.4669182, 52.4819109, 52.4781011, 52.4720649, 52.4862408, 52.4868452, 52.4868461, 52.4866356, 52.4866772, 52.4881711, 52.4881065, 52.4933225, 52.4813345, 52.4802036, 52.4808706, 52.4802155, 52.4814388, 52.4855462, 52.4895328, 52.4845360, 52.4851221, 52.4969291, 52.4919686, 52.4862522, 52.4906360, 52.4901048, 52.4893460, 52.4865380, 52.4877120, 52.4855063, 52.4898070, 52.4976192, 52.4971744, 52.4929355, 52.4464214, 52.4579680, 52.4594211, 52.4600192, 52.4651436, 52.4708825, 52.4651474, 52.4558330, 52.4530566, 52.4602877, 52.4844684, 52.4843887, 52.4897329, 52.4894455, 52.4928448, 52.4939794, 52.4914281, 52.4950472, 52.4953785, 52.4976693, 52.5039868, 52.4990007, 52.5061030, 52.5060608, 52.5054990, 52.5137921, 52.5212578, 52.5038070, 52.5040612, 52.4987341, 52.4990491, 52.4988853, 52.4987353, 52.4983467, 52.5000846, 52.4977355, 52.5031493, 52.5274898, 52.5240313, 52.5268538, 52.5254238, 52.5263088, 52.5267223, 52.5321525, 52.5251840, 52.5274109, 52.5294618, 52.5356042, 52.5416966, 52.5474432, 52.5494149, 52.5433454, 52.5461326, 52.5456829, 52.5483558, 52.5457730, 52.5458465, 52.5444647, 52.5081462, 52.4996783, 52.5029252, 52.5117059, 52.5205861, 52.5037375, 52.5104947, 52.5081485, 52.4997445, 52.5003538, 52.4982886, 52.4996666, 52.5226768, 52.5227629, 52.5110599, 52.5120138, 52.5230102, 52.5235803, 52.5312060, 52.5264492, 52.5417003, 52.5412247, 52.5431736, 52.5390835, 52.5500096, 52.5479741, 52.5297277, 52.5272448, 52.5244815, 52.5286587, 52.5345658, 52.5342032, 52.5398233, 52.5410315, 52.5406044, 52.5478411, 52.5761723, 52.5679469, 52.5665469, 52.5888213, 52.5886579, 52.5899494, 52.5777425, 52.6192254, 52.6326851, 52.5519153, 52.5537580, 52.5548354, 52.5519284, 52.5503205, 52.5514792, 52.5662558, 52.5736031, 52.5665029, 52.5654266, 52.5730322, 52.5952509, 52.5957676, 52.5958626, 52.5817377, 52.5813297, 52.5851856, 52.5963512, 52.5968112, 52.5530750, 52.5567773, 52.5598995, 52.5513970, 52.5554987, 52.5589857, 52.5578700, 52.5642050, 52.5529051, 52.5514145, 52.5689396, 52.5702944, 52.5671599, 52.5678745, 52.5920275, 52.5806002, 52.5880316, 52.6070088, 52.6077191, 52.6093446, 52.6053787, 52.6043195, 52.4175956, 52.4268714, 52.4399040, 52.4270067, 52.4420020, 52.4324152, 52.4039095, 52.4023315, 52.4258616, 52.3725075, 52.4091449, 52.4131564, 52.4211667, 52.4207048, 52.4332087, 52.4375002, 52.4445574, 52.4409717, 52.4529477, 52.4697972, 52.4684059, 52.4680062, 52.4694126, 52.4679284, 52.4683374, 52.4529467, 52.4691398, 52.4738695, 52.4787083, 52.4796562, 52.4786039, 52.4786642, 52.4810552, 52.4738723, 52.4869949, 52.4877977, 52.4861261, 52.4871001, 52.4862453, 52.4917133, 52.4862453, 52.4735581, 52.4610126, 52.4632002, 52.4675687, 52.4536053, 52.4624533, 52.4971909, 52.4968731, 52.4982933, 52.4994819, 52.5015744, 52.4997452, 52.4998436, 52.5007079, 52.5038496, 52.5028967, 52.4980313, 52.5226413, 52.5111080, 52.5156369, 52.5113206, 52.5176798, 52.5084588, 52.5095339, 52.5098940, 52.4989849, 52.5063917, 52.5045764, 52.5068561, 52.5122324, 52.5107353, 52.5117429, 52.5148775, 52.5227734, 52.5169446, 52.5147475, 52.5145500, 52.5149252, 52.5152755, 52.5149029, 52.5136838, 52.5157767, 52.5183560, 52.5303277, 52.5361026, 52.5297706, 52.5396240, 52.5446860, 52.5433304, 52.5273708, 52.5357963, 52.5482846, 52.5486253, 52.5499204, 52.5037509, 52.5008910, 52.5060384, 52.5131855, 52.5120307, 52.5145933, 52.5124351, 52.5092645, 52.5078700, 52.5057359, 52.5134210, 52.5274850, 52.5269030, 52.5358699, 52.5341218, 52.5439645, 52.5255845, 52.4588215, 52.4571499, 52.4580993, 52.4584480, 52.5057935, 52.5133751, 52.5459140, 52.5151822, 52.5122600, 52.5110216, 52.5209648, 52.5209567, 52.5293128, 52.5384377, 52.5454267, 52.5464824, 52.5363979, 52.5369706, 52.5371818, 52.5512676, 52.5522119, 52.5944041, 52.5909360, 52.5611073, 52.5696815, 52.5698039, 52.5704423, 52.5711756, 52.5698927, 52.5677957, 52.5743583, 52.5670280, 52.5669851, 52.6144146, 52.6145291, 52.6487969, 52.5553866, 52.5500648, 52.5696703, 52.5714272, 52.4305261, 52.4390356, 52.4579034, 52.4968545, 52.4970256, 52.4958581, 52.5067028, 52.5055747, 52.5119860, 52.4636987, 52.4619096, 52.4729202, 52.4659489, 52.4656471, 52.5020219, 52.5306152, 52.5022814, 52.5209387, 52.5255395, 52.5478196, 52.5491994, 52.5838141, 52.5959077, 52.5573252, 52.5538407, 52.5505797, 52.3581512, 52.4244399, 52.4296684, 52.4316199, 52.4258576, 52.4156133, 52.4155716, 52.4136812, 52.4695824, 52.4454608, 52.4747702, 52.4778630, 52.5205112, 52.5310357, 52.5105342, 52.5485335, 52.5256813, 52.5459006, 52.5048784, 52.5290449, 52.5376258, 52.5385608, 52.5380488, 52.5615014
};

const float doener_lons[] PROGMEM = {
  13.3139813, 13.2893346, 13.2346072, 13.2403962, 13.2604902, 13.2619457, 13.2322293, 13.2420327, 13.2593821, 13.2594014, 13.2411217, 13.2611587, 13.2697897, 13.3051527, 13.3133175, 13.3131746, 13.2968098, 13.3126401, 13.3159115, 13.4097778, 13.4001477, 13.4084529, 13.4024826, 13.3643082, 13.3267924, 13.3324722, 13.3470503, 13.3448426, 13.3439270, 13.3448806, 13.3455905, 13.3466277, 13.4060583, 13.4012323, 13.3939643, 13.3865671, 13.3963950, 13.2699166, 13.3156106, 13.3157990, 13.2924623, 13.3121951, 13.3010624, 13.3131766, 13.2317394, 13.2713450, 13.2840724, 13.2833464, 13.2778045, 13.2904643, 13.2945528, 13.3019656, 13.3068340, 13.3076114, 13.3073812, 13.3079077, 13.3044073, 13.3057536, 13.3144502, 13.3145533, 13.2937033, 13.3084286, 13.3072703, 13.3054467, 13.3074766, 13.3221996, 13.3220028, 13.3207471, 13.3385215, 13.3397482, 13.3220286, 13.3233757, 13.3234349, 13.3266735, 13.3241017, 13.3249880, 13.3322025, 13.3417636, 13.3439611, 13.3201459, 13.3281618, 13.3355466, 13.3215366, 13.3222597, 13.3202727, 13.3260340, 13.3236395, 13.3353391, 13.3404412, 13.3319807, 13.3481061, 13.3524664, 13.3500390, 13.3515263, 13.3496897, 13.3453446, 13.3485639, 13.3524074, 13.3536899, 13.3543603, 13.3510002, 13.3613204, 13.3608188, 13.3612042, 13.3596601, 13.3576383, 13.3581352, 13.3623727, 13.3600591, 13.3616426, 13.3614604, 13.3687704, 13.3719849, 13.3839095, 13.3765994, 13.3844195, 13.3858349, 13.3850972, 13.3947403, 13.4013890, 13.4216516, 13.4180090, 13.3852862, 13.3844875, 13.3884523, 13.3936407, 13.3865760, 13.3880216, 13.3947858, 13.4204604, 13.4202503, 13.3246068, 13.3364255, 13.3357092, 13.3332718, 13.3319560, 13.3308951, 13.3170309, 13.3221996, 13.3440644, 13.3465685, 13.3538051, 13.3546365, 13.3537046, 13.3627192, 13.3619442, 13.3627489, 13.3612508, 13.3660423, 13.3295892, 13.3294843, 13.3360289, 13.3413575, 13.3382169, 13.3373717, 13.3425101, 13.3432467, 13.3440762, 13.3688309, 13.3570659, 13.3538217, 13.3470409, 13.3542720, 13.3639990, 13.3591332, 13.3575780, 13.3600261, 13.3586095, 13.3606075, 13.3687440, 13.3743822, 13.3911394, 13.3955132, 13.3898377, 13.3884197, 13.4029620, 13.3964109, 13.3993561, 13.4178080, 13.4188439, 13.4182591, 13.4171541, 13.4011539, 13.4084173, 13.4167593, 13.4171424, 13.4119395, 13.4161473, 13.3820059, 13.3880090, 13.3702188, 13.3703217, 13.3926145, 13.3950256, 13.3869449, 13.3911896, 13.4002442, 13.3991334, 13.4031679, 13.4090078, 13.4157629, 13.4216940, 13.4113062, 13.4132143, 13.4166777, 13.4135033, 13.2952951, 13.3126048, 13.3168772, 13.2847477, 13.2885539, 13.2876863, 13.3157014, 13.3048367, 13.3098710, 13.3489050, 13.3457336, 13.3446937, 13.3498171, 13.3515558, 13.3677378, 13.3454255, 13.3514270, 13.3632336, 13.3631319, 13.3590207, 13.3353978, 13.3332924, 13.3359134, 13.3631130, 13.3640740, 13.3668569, 13.3465432, 13.3538524, 13.3795148, 13.3768138, 13.3794232, 13.3838128, 13.3842982, 13.3858739, 13.3860523, 13.3923153, 13.4056573, 13.4136359, 13.4035961, 13.4039190, 13.4117047, 13.4123908, 13.3841182, 13.4012032, 13.4015214, 13.3191523, 13.3249358, 13.3353598, 13.3569893, 13.3664794, 13.4379305, 13.4349794, 13.4343063, 13.4486107, 13.4565194, 13.4622096, 13.5067054, 13.5257461, 13.4836216, 13.6153780, 13.5724481, 13.5720521, 13.5390108, 13.5390519, 13.5354084, 13.5473059, 13.5857809, 13.6014615, 13.4382365, 13.4297583, 13.4310093, 13.4312186, 13.4413955, 13.4428419, 13.4421118, 13.4557281, 13.4672355, 13.4275869, 13.4254935, 13.4252059, 13.4260754, 13.4255034, 13.4345447, 13.4410866, 13.4242932, 13.4259828, 13.4252823, 13.4226900, 13.4291776, 13.4232107, 13.4468409, 13.4558428, 13.4799191, 13.4838313, 13.4897981, 13.5094736, 13.5145636, 13.4988380, 13.5233586, 13.4301570, 13.4284056, 13.4315434, 13.4388667, 13.4391610, 13.4421693, 13.4473758, 13.4472699, 13.4429779, 13.4346668, 13.4354502, 13.4398981, 13.4349195, 13.4410506, 13.4524039, 13.4508541, 13.4558664, 13.4642845, 13.4702176, 13.4684053, 13.4706758, 13.4520754, 13.4563544, 13.4561409, 13.4610282, 13.4506162, 13.4613357, 13.4664297, 13.4641970, 13.4674954, 13.4631732, 13.4737036, 13.4725763, 13.4679056, 13.4658491, 13.4257868, 13.4339033, 13.4445820, 13.4240950, 13.4269880, 13.4408986, 13.4722383, 13.4733267, 13.4518219, 13.4516563, 13.4589615, 13.4859372, 13.4937741, 13.4961055, 13.4821990, 13.4965401, 13.4981138, 13.4979558, 13.5044038, 13.5125770, 13.5200926, 13.5216205, 13.4801013, 13.4789037, 13.4742779, 13.4862258, 13.4982623, 13.5204840, 13.5266410, 13.5783536, 13.5801938, 13.5800009, 13.5604279, 13.5541731, 13.5544910, 13.5829698, 13.5885443, 13.5870521, 13.5883161, 13.5876170, 13.5923588, 13.6038001, 13.5924167, 13.5925137, 13.6057255, 13.6076579, 13.6073144, 13.4425783, 13.4665400, 13.4325846, 13.4427298, 13.5000743, 13.4963217, 13.4966140, 13.4962015, 13.4998482, 13.4952704, 13.5125839, 13.5093662, 13.5191601, 13.5140043, 13.4696539, 13.4703351, 13.5151846, 13.5599931, 13.5636196, 13.5673138, 13.5681009, 13.2592077, 13.3886753, 13.2897826, 13.2906042, 13.2894345, 13.2954386, 13.2835910, 13.3072791, 13.3075624, 13.3325284, 13.3390698, 13.3280498, 13.3851797, 13.3850700, 13.3438182, 13.3472028, 13.4149186, 13.4121310, 13.3696328, 13.3889600, 13.3886762, 13.3013898, 13.3359819, 13.3734054, 13.4138820, 13.4144572, 13.4342733, 13.4356486, 13.4529310, 13.4587421, 13.4646314, 13.4958628, 13.4956765, 13.5745978, 13.4419482, 13.4545145, 13.4276727, 13.4483365, 13.4626972, 13.4707577, 13.4987418, 13.5056970, 13.5441125, 13.5450924, 13.5888483, 13.5951698, 13.5895416, 13.6048481, 13.6055813, 13.4994380
};


const int NUM_LOCATIONS = sizeof(doener_lats) / sizeof(doener_lats[0]);

int flag = 0;




void setup() {
  Serial.begin(9600);
  gpsSerial.begin(9600);
  Serial.println("Starten");
  if (!cap.begin(0x5A)) {
    Serial.println("MPR121 nicht gefunden. ÃœberprÃ¼fe die Verbindung.");
    while (1)
      ;
  }

  Serial.println("MPR121 gefunden!");
}






void loop() {

  

  uint16_t touched = cap.touched();







  while (gpsSerial.available() > 0) {
    gps.encode(gpsSerial.read());





    if (gps.location.isUpdated()) {
      float BoxLat = gps.location.lat();
      float BoxLon = gps.location.lng();
      //float BoxLat = 52.590672;
      //float BoxLon = 13.358412;


      float minDist = 999999.0;
      int nearestIndex = -1;
      if (flag == 0){
      if (touched & (1 << 0)) {

        flag = 1;

        for (int i = 0; i < NUM_LOCATIONS; i++) {

          float lat = pgm_read_float(&doener_lats[i]);
          float lon = pgm_read_float(&doener_lons[i]);
          float dist = TinyGPSPlus::distanceBetween(BoxLat, BoxLon, lat, lon);

          if (dist < minDist) {
            minDist = dist;
            nearestIndex = i;
          }
        }




        // Ausgabe des nÃ¤chsten DÃ¶nerladens
        Serial.println(" ");
        Serial.println(BoxLat, 6);
        Serial.println(BoxLon, 6);
        Serial.print("NÃ¤chster DÃ¶nerladen bei: ");
        Serial.print(pgm_read_float(&doener_lats[nearestIndex]), 6);
        Serial.print(", ");
        Serial.print(pgm_read_float(&doener_lons[nearestIndex]), 6);
        Serial.print(" (");
        Serial.print(minDist, 1);
        Serial.println(" m entfernt)");
        Serial.println(gps.satellites.value());
      }
      }
    }
  }

    if (touched & (1 << 0)) {
    digitalWrite(13, HIGH);
    
  } else {
    digitalWrite(13, LOW);
    flag = 0;
  }

}

